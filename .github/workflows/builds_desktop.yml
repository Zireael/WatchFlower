name: "Desktop CI builds"

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master ]

jobs:
  ## Windows build #############################################################
  build-windows:
    name: "Windows CI build"
    runs-on: windows-2022
    strategy:
      matrix:
        qt_arch: [win64_msvc2019_64]
        qt_ver: [6.7.3]
        qt_tools: [tools_qtcreator,qt.tools.qtcreator]
        
    env:
      QT_VERSION: ${{ matrix.qt_ver }}
      
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup environment variables  
      run: |
        echo "APP_VERSION=1.0.0" >> $GITHUB_ENV
      shell: bash

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt_ver }}
        host: 'windows'
        target: 'desktop' 
        arch: ${{ matrix.qt_arch }}
        setup-python: 'false'
        
    - name: Verify Qt installation
      run: |
        echo "Qt6_DIR: ${{ env.Qt6_DIR }}"
        echo "QTDIR: ${{ env.QTDIR }}"
        echo "QT_ROOT_DIR: ${{ env.QT_ROOT_DIR }}"
        qmake --version
        echo ${{ matrix.qt_ver }}
        echo "Qt installation path: $(which qmake)"
      shell: bash

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup CMake and Ninja
      uses: lukka/get-cmake@latest

    - name: Setup MSVC Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Restore Qt cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.workspace }}/Qt
        key: ${{ runner.os }}-qt-${{ matrix.qt_ver }}-${{ matrix.qt_arch }}
        restore-keys: |
          ${{ runner.os }}-qt-${{ matrix.qt_ver }}-
          ${{ runner.os }}-qt-

    - name: Restore CMake cache  
      uses: actions/cache@v4
      with:
        path: |
          build-windows
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}-${{ env.BUILD_TYPE }}
        restore-keys: |
          ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}-
          ${{ runner.os }}-cmake-

    - name: Make deployment script executable
      run: chmod +x deploy_windows.sh
      shell: bash

    - name: Build and deploy Windows application
      run: |
        # Ensure Qt is in PATH and environment is set
        echo "Current PATH: $PATH"
        echo "Qt6_DIR: $Qt6_DIR"
        echo "QTDIR: $QTDIR"
        
        # Set additional environment variables for the script
        export APP_NAME=WatchFlower
        export APP_VERSION=$APP_VERSION
        export BUILD_TYPE=Release
        export QT_VERSION=${{ matrix.qt_ver }}
        export MSVC_VERSION=2022
        
        # Run the deployment script
        ./deploy_windows.sh
      shell: bash
      env:
        CMAKE_GENERATOR: "Visual Studio 17 2022"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: WatchFlower-${{ env.APP_VERSION }}-windows-x64
        path: |
          deploy-windows/
          *.zip
        retention-days: 14

    - name: Upload to release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: "*.zip"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ## macOS build ###############################################################
  build-macos:
    name: "macOS CI build"
    runs-on: macos-12
    strategy:
      matrix:
        qt_ver: [6.7.3]
        qt_host: [mac]
        qt_arch: [clang_64]
    env:
      QT_VERSION: ${{ matrix.qt_ver }}

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup environment variables
      run: |
        echo "APP_VERSION=1.0.0" >> $GITHUB_ENV

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt_ver }}
        host: ${{ matrix.qt_host }}
        target: 'desktop'
        arch: ${{ matrix.qt_arch }}
        setup-python: 'false'

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Build application
      run: |
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$Qt6_DIR
        make -j$(sysctl -n hw.logicalcpu)

  ## Linux build ###############################################################  
  build-linux:
    name: "Linux CI build"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        qt_ver: [6.7.3]
        
    env:
      QT_VERSION: ${{ matrix.qt_ver }}

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup environment variables
      run: |
        echo "APP_VERSION=1.0.0" >> $GITHUB_ENV

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config
        sudo apt-get install -y libbluetooth-dev

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt_ver }}
        host: 'linux'
        target: 'desktop'
        setup-python: 'false'

    - name: Build application  
      run: |
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$Qt6_DIR
        make -j$(nproc)
