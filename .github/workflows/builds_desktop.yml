name: "Desktop CI builds"
on:
  push:
  pull_request:

jobs:
  ## Windows build #############################################################
  build-windows:
    name: "Windows CI build (${{ matrix.config }}, ${{ matrix.qt_version }}, ${{ matrix.qt_modules }})"
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        config: [win64_msvc2019_64]
        qt_version: [6.7.3]
        qt_modules: [qt.tools.qtcreator]

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Set version
      - name: Set APP_VERSION env var
        run: echo "APP_VERSION=1.0.0" >> $GITHUB_ENV

      # Install Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_version }}
          host: 'windows'
          target: 'desktop'
          arch: '${{ matrix.config }}'
          modules: 'qtconnectivity qtpositioning qtcharts ${{ matrix.qt_modules }}'
          setup-python: 'false'

      # Setup MSVC
      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v2

      # Install CMake + Ninja
      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest

      # Setup MSVC dev environment
      - name: Setup MSVC dev environment
        uses: ilammy/msvc-dev-cmd@v1

      # Cache Qt installation
      - name: Cache Qt
        id: cache-qt-windows
        uses: actions/cache@v4
        with:
          path: ../Qt
          key: ${{ runner.os }}-qt-${{ matrix.qt_version }}-${{ matrix.config }}
          restore-keys: |
            ${{ runner.os }}-qt-${{ matrix.qt_version }}-
            ${{ runner.os }}-qt-

      # Cache CMake build
      - name: Cache CMake build folder
        uses: actions/cache@v4
        with:
          path: build
          key: ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt') }}-
          restore-keys: |
            ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt') }}-
            ${{ runner.os }}-cmake-

      # Build application
      - name: Build application
        run: |
          chmod +x deploy_windows.sh
          ./deploy_windows.sh

      # Upload artifacts
      - name: Upload app package (zip)
        uses: actions/upload-artifact@v4
        with:
          name: WatchFlower-${{ matrix.config }}-${{ matrix.qt_version }}
          path: deploy-windows/

  ## macOS build ###############################################################
  build-macos:
    name: "macOS CI build (${{ matrix.config }}, ${{ matrix.qt_version }})"
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        config: [macos]
        qt_version: [6.7.3]

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Set version
      - name: Set APP_VERSION env var
        run: echo "APP_VERSION=1.0.0" >> $GITHUB_ENV

      # Install Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_version }}
          host: 'mac'
          target: 'desktop'
          modules: 'qtconnectivity qtpositioning qtcharts'
          setup-python: 'false'

      # Install CMake + Ninja
      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest

      # Cache Qt installation
      - name: Cache Qt
        id: cache-qt-macos
        uses: actions/cache@v4
        with:
          path: ../Qt
          key: ${{ runner.os }}-qt-${{ matrix.qt_version }}-${{ matrix.config }}
          restore-keys: |
            ${{ runner.os }}-qt-${{ matrix.qt_version }}-
            ${{ runner.os }}-qt-

      # Build application
      - name: Build application
        run: |
          chmod +x deploy_macos.sh
          ./deploy_macos.sh

      # Upload artifacts
      - name: Upload app package (dmg)
        uses: actions/upload-artifact@v4
        with:
          name: WatchFlower-${{ matrix.config }}-${{ matrix.qt_version }}
          path: deploy-macos/

  ## Linux build ###############################################################
  build-linux:
    name: "Linux CI build (${{ matrix.config }}, ${{ matrix.qt_version }})"
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        config: [linux]
        qt_version: [6.7.3]

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Set version
      - name: Set APP_VERSION env var
        run: echo "APP_VERSION=1.0.0" >> $GITHUB_ENV

      # Install Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_version }}
          host: 'linux'
          target: 'desktop'
          modules: 'qtconnectivity qtpositioning qtcharts'
          setup-python: 'false'

      # Install CMake + Ninja
      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest

      # Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgl1-mesa-dev libxkbcommon-x11-0 libxcb-xinerama0

      # Cache Qt installation
      - name: Cache Qt
        id: cache-qt-linux
        uses: actions/cache@v4
        with:
          path: ../Qt
          key: ${{ runner.os }}-qt-${{ matrix.qt_version }}-${{ matrix.config }}
          restore-keys: |
            ${{ runner.os }}-qt-${{ matrix.qt_version }}-
            ${{ runner.os }}-qt-

      # Build application
      - name: Build application
        run: |
          chmod +x deploy_linux.sh
          ./deploy_linux.sh

      # Upload artifacts
      - name: Upload app package (AppImage)
        uses: actions/upload-artifact@v4
        with:
          name: WatchFlower-${{ matrix.config }}-${{ matrix.qt_version }}
          path: deploy-linux/
