name: Windows Build

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  release:
    types: [ published ]

env:
  QT_VERSION: '6.7.3'
  CMAKE_VERSION: '3.27.7'
  NINJA_VERSION: '1.11.1'

jobs:
  build-windows:
    runs-on: windows-2022
    
    strategy:
      matrix:
        arch: [x64]
        build_type: [Release]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Set up environment variables
      run: |
        echo "APP_VERSION=${{ github.event.release.tag_name || '1.0.0' }}" >> $GITHUB_ENV
        echo "BUILD_TYPE=${{ matrix.build_type }}" >> $GITHUB_ENV
        echo "QT_VERSION=${{ env.QT_VERSION }}" >> $GITHUB_ENV
        echo "MSVC_VERSION=2022" >> $GITHUB_ENV
      shell: bash
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        target: desktop
        arch: win64_msvc2019_64
        modules: 'qtconnectivity qtcharts qtpositioning'
        setup-python: 'false'
        cache: true
        
    - name: Verify Qt installation
      run: |
        echo "Qt6_DIR: ${{ env.Qt6_DIR }}"
        echo "QTDIR: $QTDIR"
        echo "QT_ROOT_DIR: $QT_ROOT_DIR"
        qmake --version
        windeployqt --version
        echo "Qt installation path: $(which qmake)"
      shell: bash
        
    - name: Set up MSVC
      uses: microsoft/setup-msbuild@v2
      
    - name: Install CMake and Ninja
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: ${{ env.CMAKE_VERSION }}
        ninjaVersion: ${{ env.NINJA_VERSION }}
        
    - name: Configure MSVC environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}
        
    - name: Cache Qt
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.tool_cache }}/Qt
        key: ${{ runner.os }}-qt-${{ env.QT_VERSION }}-${{ matrix.arch }}
        restore-keys: |
          ${{ runner.os }}-qt-${{ env.QT_VERSION }}-
          ${{ runner.os }}-qt-
          
    - name: Cache CMake build
      uses: actions/cache@v4
      with:
        path: |
          build-windows
          !build-windows/CMakeFiles
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}-${{ matrix.build_type }}
        restore-keys: |
          ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}-
          ${{ runner.os }}-cmake-
          
    - name: Make deployment script executable
      run: chmod +x deploy_windows.sh
      shell: bash
      
    - name: Run Windows deployment
      run: |
        # Ensure Qt is in PATH
        export PATH="$Qt6_DIR/bin:$PATH"
        export QTDIR="$Qt6_DIR"
        
        # Debug environment
        echo "Current PATH: $PATH"
        echo "Qt6_DIR: $Qt6_DIR"
        echo "QTDIR: $QTDIR"
        
        # Run deployment script
        ./deploy_windows.sh
      shell: bash
      env:
        CMAKE_GENERATOR: "Ninja"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: WatchFlower-Windows-${{ matrix.arch }}-${{ matrix.build_type }}
        path: |
          deploy-windows/
          *.zip
          *.exe
        retention-days: 30
        
    - name: Upload to release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.zip
          *.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run basic tests
      if: success()
      run: |
        if [ -f "deploy-windows/WatchFlower.exe" ]; then
          echo "✓ Executable found"
          ls -la deploy-windows/WatchFlower.exe
        else
          echo "✗ Executable not found"
          exit 1
        fi
        
        # Check for required Qt DLLs
        required_dlls=("Qt6Core.dll" "Qt6Gui.dll" "Qt6Widgets.dll" "Qt6Bluetooth.dll")
        for dll in "${required_dlls[@]}"; do
          if [ -f "deploy-windows/$dll" ]; then
            echo "✓ $dll found"
          else
            echo "✗ $dll missing"
            exit 1
          fi
        done
        
        echo "All basic tests passed!"
      shell: bash
